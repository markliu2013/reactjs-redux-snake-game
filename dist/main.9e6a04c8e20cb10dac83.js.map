{"version":3,"sources":["webpack:///./src/index.css","webpack:///./src/index.css?7d1f","webpack:///./src/constants/Config.js","webpack:///./src/components/Square.js","webpack:///./src/components/Board.js","webpack:///./src/containers/BoardContainer.js","webpack:///./src/components/GameScore.js","webpack:///./src/components/GridRowNumsSelect.js","webpack:///./src/components/GridColNumsSelect.js","webpack:///./src/components/GameSpeedSelect.js","webpack:///./src/components/HitCheckBox.js","webpack:///./src/constants/GameStatus.js","webpack:///./src/components/ControlStatus.js","webpack:///./src/components/ControlData.js","webpack:///./src/components/GameInfo.js","webpack:///./src/components/ControlPanel.js","webpack:///./src/constants/ActionTypes.js","webpack:///./src/actions/index.js","webpack:///./src/containers/ControlPanelContainer.js","webpack:///./src/containers/SnakeTimer.js","webpack:///./src/constants/Directions.js","webpack:///./src/containers/Game.js","webpack:///./src/utils/index.js","webpack:///./src/utils/config.js","webpack:///./src/reducers/index.js","webpack:///./src/selectors/index.js","webpack:///./src/utils/localStorage.js","webpack:///./src/sagas/index.js","webpack:///./src/index.js"],"names":["module","exports","__webpack_require__","push","i","content","options","hmr","transform","insertInto","undefined","locals","speedOptions","gridRowNumOptions","gridColNumOptions","Square","_ref","isSnakeHead","isSnakeOn","isFoodOn","squareClass","classNames","square","snakeHead","onSnake","onFood","react_default","a","createElement","className","Board","gridRowNum","gridColNum","snakeData","foodData","squareNums","gridTemplateStyle","display","gridGap","gridTemplateColumns","gridTemplateRows","style","Array","fill","map","_","components_Square","key","length","includes","BoardContainer","connect","state","board","snake","data","food","GameScore","score","GridRowNumsSelect","value","onChange","e","target","option","GridColNumsSelect","GameSpeedSelect","HitCheckBox","type","checked","RUNNING","STOPPED","OVER","ControlStatus","onRestartClick","onToggleClick","onResetClick","onReviveClick","gameStatus","onClick","disabled","ControlData","onSave","onLoad","GameInfo","href","ControlPanel","_this","props","onGridRowNumControlChange","onGridColNumControlChange","onSnakeSpeedControlChange","onSnakeCanHitSelfChange","_this$props","this","gridRowNumControl","gridColNumControl","snakeSpeedOptions","snakeSpeedControl","snakeCanHitSelfControl","components_GameScore","components_GridRowNumsSelect","handleGridRowNumControlChange","components_GridColNumsSelect","handleGridColNumControlChange","components_GameSpeedSelect","handleSnakeSpeedControlChange","components_HitCheckBox","handleSnakeCanHitSelfChange","components_ControlStatus","components_ControlData","onSaveClick","onLoadClick","components_GameInfo","React","Component","RESTART_GAME","RESTART_GAME_BEFORE","TOGGLE_GAME","RESET_GAME","RESET_GAME_BEFORE","OVER_GAME","REVIVE_GAME","CHANGE_GRID_ROW_NUM","CHANGE_GRID_COL_NUM","CHANGE_SNAKE_SPEED","CHANGE_SNAKE_CAN_HIT_SELF","SNAKE_GO","SNAKE_GO_WITH_DATA","EAT_FOOD","CREATE_FOOD","CREATE_FOOD_WITH_DATA","CHANGE_DIRECTION","SAVE_STATE","LOAD_STATE","LOAD_STATE_WITH_DATA","restartGameBefore","types","resetGameBefore","overGame","snakeGo","snakeGoWithData","eatFood","createFood","createFoodWithData","loadStateWithData","ControlPanelContainer","configs","control","snakeSpeedValue","snakeCanHitSelf","game","status","dispatch","changeGridRowNumControl","changeGridColNumControl","changeSnakeSpeedControl","changeSnakeCanHitSelfControl","SnakeTimer","timerID","clearInterval","snakeSpeed","onSnakeGo","setInterval","setTimer","UP","speedValue","DOWN","LEFT","RIGHT","Game","event","onKeyPress","keyCode","document","addEventListener","handleKeyPress","onLoaded","removeEventListener","containers_BoardContainer","containers_ControlPanelContainer","changeDirection","keyCodeToDirection","getInitialState","direction","directions","toConsumableArray_default","keys","canHitSelf","initialState","stateJson","JSON","stringify","Number","snakeCanHitSelfValue","Boolean","snakeDirection","loadState","serializedState","localStorage","getItem","parse","err","saveState","setItem","restartGameSaga","watchRestartGame","resetGameSaga","watchResetGame","watchSnakeGo","snakeGoSaga","createFoodSaga","watchCreateFood","saveStateSaga","watchSaveState","loadStateSaga","watchLoadState","snakeGoTimer","rootSaga","action","regenerator_default","wrap","_context","prev","next","put","stop","_marked","_context2","takeEvery","_marked2","_context3","_marked3","_context4","_marked4","_context5","_marked5","gridNum","hitFlag","nextGrid","_context6","select","selectors","sent","t0","abrupt","_marked6","squareArr","foodArr","_context7","filter","min","max","Math","ceil","floor","random","_marked7","_context8","_marked8","_context9","_marked9","_context10","_marked10","json","_context11","call","_marked11","_context12","_marked12","_context13","delay","_marked13","_context14","all","_marked14","sagaMiddleware","createSagaMiddleware","store","createLogger","createStore","arguments","actionTypes","nextState","Object","assign","nextSnakeData","slice","shift","applyMiddleware","run","sega","ReactDOM","render","es","containers_Game","getElementById"],"mappings":"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","file":"main.9e6a04c8e20cb10dac83.js","sourcesContent":["exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"body {\\n    margin: 0;\\n    padding: 0;\\n    background: #eeeeee;\\n    font-family: Arial, sans-serif;\\n    font-style: normal;\\n    font-weight: 400;\\n    font-size: 14px;\\n    line-height: 18px;\\n    color: #000;\\n}\\na {\\n    color: #0088cc;\\n    text-decoration: none;\\n}\\na:hover {\\n    text-decoration: underline;\\n}\\n\\n.gameWrapper {\\n    display: flex;\\n    margin: 0 auto;\\n    padding: 10px 0 0 0;\\n    width: 960px;\\n}\\n.boardWrapper {\\n    flex: 1;\\n}\\n.boardGrid {\\n    float: left; /* fix width */\\n    padding: 1px;\\n    border: 1px solid #000;\\n}\\n.controlPanel {\\n    padding: 20px 10px 0 10px;\\n    width: 270px;\\n    height: 500px;\\n    border: 1px solid #000;\\n}\\n.boardWrapper .square {\\n    background: #fff;\\n}\\n.boardWrapper .square.onSnake {\\n    background: #000;\\n}\\n.boardWrapper .square.onSnake.snakeHead {\\n    background: #a00;\\n}\\n.boardWrapper .square.onFood {\\n    background: #0a0;\\n}\\n.controlPanel h2 {\\n    margin: 0 0 30px 0;\\n    text-align: center;\\n    font-size: 30px;\\n    text-transform: capitalize;\\n}\\n.gameScoreInfo {\\n    display: flex;\\n    margin-bottom: 20px;\\n}\\n.gameScoreInfo span {\\n    margin-right: 10px;\\n}\\n.gameScoreInfo strong {\\n    flex: 1;\\n    font-size: 50px;\\n    color: #f00;\\n}\\n.gameInitControl > div {\\n    display: inline-block;\\n    margin-bottom: 10px;\\n    margin-left: 5px;\\n}\\n.gameInitControl select {\\n    margin-right: 5px;\\n}\\n.gameInitControl span {\\n    margin-right: 5px;\\n}\\n.gameInitControl {\\n    margin-bottom: 10px;\\n}\\n.controlButtons {\\n    display: flex;\\n    margin-bottom: 10px;\\n    justify-content: space-evenly;\\n}\", \"\"]);\n","\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/dist/cjs.js!./index.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","export const speedOptions = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 50]; // millisecond on grid\nexport const gridRowNumOptions = [10, 20, 30];\nexport const gridColNumOptions = [10, 20, 30];","import React from 'react';\nimport classNames from 'classnames';\n\nconst Square = ({isSnakeHead, isSnakeOn, isFoodOn}) => {\n    let squareClass = classNames({\n        square: true,\n        snakeHead: isSnakeHead,\n        onSnake: isSnakeOn,\n        onFood: isFoodOn\n    });\n    return (\n        <div className={squareClass}></div>\n    );\n};\n\nexport default Square;","import React from 'react';\nimport Square from \"./Square\";\n\nconst Board = ({ gridRowNum, gridColNum, snakeData, foodData }) => {\n    const squareNums = gridRowNum * gridColNum;\n    const gridTemplateStyle = {\n        display: 'grid',\n        gridGap: '2px',\n        gridTemplateColumns: 'repeat('+gridColNum+', 18px)',\n        gridTemplateRows: 'repeat('+gridRowNum+', 18px)',\n    };\n\n    return (\n        <div className=\"boardWrapper\">\n            <div className=\"boardGrid\" style={gridTemplateStyle}>\n                { Array(squareNums).fill().map((_, i) => {\n                    return (<Square key={i} isSnakeHead={i===snakeData[snakeData.length-1]} isSnakeOn={snakeData.includes(i)} isFoodOn={i === foodData} />)\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default Board;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as configs from '../constants/Config';\nimport Board from '../components/Board';\n\nconst mapStateToProps = (state) => {\n    return ({\n        gridRowNum: state.board.gridRowNum,\n        gridColNum: state.board.gridColNum,\n        snakeData: state.snake.data,\n        foodData: state.food.data\n    })\n}\n\nconst BoardContainer = connect(mapStateToProps, null)(Board);\n\nexport default BoardContainer;\n","import React from 'react';\n\nconst GameScore = ({ score }) => (\n    <div className=\"gameScoreInfo\"><span>Score: </span><strong>{score}</strong></div>\n);\n\nexport default GameScore;","import React from 'react';\n\nconst GridRowNumsSelect = ({options, value, onChange}) => (\n    <div className=\"gridRowNumsSelect\">\n        <label>\n            Grid Rows:\n            <select value={value} onChange={e => onChange(e.target.value)}>\n                {options.map((option, i) => (\n                    <option value={option} key={i}>\n                        {option}\n                    </option>\n                ))}\n            </select>\n        </label>\n    </div>\n);\n\nexport default GridRowNumsSelect;","import React from 'react';\n\nconst GridColNumsSelect = ({options, value, onChange}) => (\n    <div className=\"gridColNumsSelect\">\n        <label>\n            Grid Columns:\n            <select value={value} onChange={e => onChange(e.target.value)}>\n                {options.map((option, i) => (\n                    <option value={option} key={i}>\n                        {option}\n                    </option>\n                ))}\n            </select>\n        </label>\n    </div>\n);\n\nexport default GridColNumsSelect;","import React from 'react';\n\nconst GameSpeedSelect = ({options, value, onChange}) => (\n    <div className=\"gameSpeedSelect\">\n        <label>\n            Speed Level:\n            <select value={value} onChange={e => onChange(e.target.value)}>\n                {options.map((option, i) => (\n                    <option value={option} key={i}>\n                        {i+1}\n                    </option>\n                ))}\n            </select>\n        </label>\n    </div>\n);\n\nexport default GameSpeedSelect;","import React from 'react';\n\nconst HitCheckBox = ({value, onChange}) => (\n    <div>\n        <label>\n            Can Hit Self:\n            <input\n                type=\"checkbox\"\n                checked={value}\n                onChange={e => {onChange(e.target.checked)}} />\n        </label>\n    </div>\n);\n\nexport default HitCheckBox;","export const RUNNING = 'running';\nexport const STOPPED = 'stopped';\nexport const OVER = 'over';","import React from 'react';\nimport { RUNNING, STOPPED, OVER } from '../constants/GameStatus';\n\nconst ControlStatus = ({ onRestartClick, onToggleClick, onResetClick, onReviveClick, gameStatus }) => (\n    <div className=\"controlButtons\">\n        <button onClick={ onRestartClick }>Restart</button>\n        <button onClick={ onToggleClick } disabled={gameStatus === OVER}>{gameStatus === RUNNING ? 'Pause' : 'Continue'}</button>\n        <button onClick={ onResetClick }>Reset</button>\n        <button onClick={ onReviveClick } disabled={gameStatus !== OVER}>Revive</button>\n    </div>\n);\n\nexport default ControlStatus;","import React from 'react';\n\nconst ControlData = ({ onSave, onLoad }) => (\n    <div className=\"controlButtons\">\n        <button onClick={ onSave }>Save</button>\n        <button onClick={ onLoad }>Load</button>\n    </div>\n);\n\nexport default ControlData;","import React from 'react';\n\nconst GameInfo = () => (\n    <div className=\"gameInfo\">\n        <p>Tips：keep Pressing the arrow key, snake will keep moving.</p>\n        <p>Written by Mark Liu <a href=\"https://github.com/markliu2013/reactjs-redux-snake-game/\" target=\"_blank\">https://github.com/markliu2013/reactjs-redux-snake-game/</a></p>\n    </div>\n);\n\nexport default GameInfo;","import React from 'react';\nimport GameScore from './GameScore';\nimport GridRowNumsSelect from './GridRowNumsSelect';\nimport GridColNumsSelect from './GridColNumsSelect';\nimport GameSpeedSelect from './GameSpeedSelect';\nimport HitCheckBox from './HitCheckBox';\nimport ControlStatus from './ControlStatus';\nimport ControlData from './ControlData';\nimport GameInfo from './GameInfo';\n\nexport default class ControlPanel extends React.Component {\n\n    handleGridRowNumControlChange = (value) => {\n        this.props.onGridRowNumControlChange(value);\n    }\n\n    handleGridColNumControlChange = (value) => {\n        this.props.onGridColNumControlChange(value);\n    }\n\n    handleSnakeSpeedControlChange = (value) => {\n        this.props.onSnakeSpeedControlChange(value);\n    }\n\n    handleSnakeCanHitSelfChange = (value) => {\n        this.props.onSnakeCanHitSelfChange(value);\n    }\n\n    render() {\n        const { gridRowNumOptions, gridRowNumControl, gridColNumOptions, gridColNumControl, snakeSpeedOptions, snakeSpeedControl, snakeCanHitSelfControl, score, gameStatus } = this.props;\n        return (\n            <div className=\"controlPanel\">\n                <h2>{gameStatus}</h2>\n                <GameScore score = {score} />\n                <div className=\"gameInitControl\">\n                    <GridRowNumsSelect options={gridRowNumOptions} value={gridRowNumControl} onChange={this.handleGridRowNumControlChange} />\n                    <GridColNumsSelect options={gridColNumOptions} value={gridColNumControl} onChange={this.handleGridColNumControlChange} />\n                    <GameSpeedSelect options={snakeSpeedOptions} value={snakeSpeedControl} onChange={this.handleSnakeSpeedControlChange} />\n                    <HitCheckBox value={snakeCanHitSelfControl} onChange={this.handleSnakeCanHitSelfChange} />\n                </div>\n                <ControlStatus gameStatus={gameStatus}\n                               onRestartClick={this.props.onRestartClick}\n                               onToggleClick={this.props.onToggleClick}\n                               onResetClick={this.props.onResetClick}\n                               onReviveClick={this.props.onReviveClick} />\n                <ControlData onSave={this.props.onSaveClick} onLoad={this.props.onLoadClick} />\n                <GameInfo />\n            </div>\n        );\n    }\n}","export const RESTART_GAME = 'RESTART_GAME';\nexport const RESTART_GAME_BEFORE = 'RESTART_GAME_BEFORE';\nexport const TOGGLE_GAME = 'TOGGLE_GAME';\nexport const RESET_GAME = 'RESET_GAME';\nexport const RESET_GAME_BEFORE = 'RESET_GAME_BEFORE';\nexport const OVER_GAME = 'OVER_GAME';\nexport const REVIVE_GAME = 'REVIVE_GAME';\n\nexport const CHANGE_GRID_ROW_NUM = 'CHANGE_GRID_ROW_NUM';\nexport const CHANGE_GRID_COL_NUM = 'CHANGE_GRID_COL_NUM';\nexport const CHANGE_SNAKE_SPEED = 'CHANGE_SNAKE_SPEED';\nexport const CHANGE_SNAKE_CAN_HIT_SELF = 'CHANGE_SNAKE_CAN_HIT_SELF';\n\nexport const SNAKE_GO = 'SNAKE_GO';\nexport const SNAKE_GO_WITH_DATA = 'SNAKE_GO_WITH_DATA';\nexport const EAT_FOOD = 'EAT_FOOD';\nexport const CREATE_FOOD = 'CREATE_FOOD';\nexport const CREATE_FOOD_WITH_DATA = 'CREATE_FOOD_WITH_DATA';\nexport const CHANGE_DIRECTION = 'CHANGE_DIRECTION';\n\nexport const SAVE_STATE = 'SAVE_STATE';\nexport const LOAD_STATE = 'LOAD_STATE';\nexport const LOAD_STATE_WITH_DATA = 'LOAD_STATE_WITH_DATA';","import * as types from '../constants/ActionTypes';\n\nexport const restartGame = () => ({ type: types.RESTART_GAME });\nexport const restartGameBefore = () => ({ type: types.RESTART_GAME_BEFORE });\nexport const toggleGame = () => ({ type: types.TOGGLE_GAME });\nexport const resetGame = () => ({ type: types.RESET_GAME });\nexport const resetGameBefore = () => ({ type: types.RESET_GAME_BEFORE });\nexport const overGame = () => ({ type: types.OVER_GAME });\nexport const reviveGame = () => ({ type: types.REVIVE_GAME });\n\nexport const changeGridRowNumControl = (value) => ({\n    type: types.CHANGE_GRID_ROW_NUM,\n    value: value\n});\nexport const changeGridColNumControl = (value) => ({\n    type: types.CHANGE_GRID_COL_NUM,\n    value: value\n});\nexport const changeSnakeSpeedControl = (value) => ({\n    type: types.CHANGE_SNAKE_SPEED,\n    value: value\n});\nexport const changeSnakeCanHitSelfControl = (value) => ({\n    type: types.CHANGE_SNAKE_CAN_HIT_SELF,\n    value: value\n});\n\nexport const snakeGo = () => ({ type: types.SNAKE_GO });\nexport const snakeGoWithData = (value) => ({\n    type: types.SNAKE_GO_WITH_DATA,\n    value: value\n});\nexport const eatFood = () => ({ type: types.EAT_FOOD });\nexport const createFood = (value) => ({ type: types.CREATE_FOOD });\nexport const createFoodWithData = (value) => ({\n    type: types.CREATE_FOOD_WITH_DATA,\n    value: value\n});\n\nexport const changeDirection = (value) => ({\n    type: types.CHANGE_DIRECTION,\n    value: value\n});\n\nexport const saveState = () => ({ type: types.SAVE_STATE });\nexport const loadState = () => ({ type: types.LOAD_STATE });\nexport const loadStateWithData = (value) => ({\n    type: types.LOAD_STATE_WITH_DATA,\n    value: value\n});","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as configs from '../constants/Config';\nimport ControlPanel from '../components/ControlPanel';\nimport { restartGame, toggleGame, resetGame, reviveGame, changeGridRowNumControl, changeGridColNumControl, changeSnakeSpeedControl, changeSnakeCanHitSelfControl, saveState, loadState } from '../actions';\n\nconst mapStateToProps = (state) => ({\n    gridRowNumOptions: configs.gridRowNumOptions,\n    gridRowNumControl: state.control.gridRowNum,\n    gridColNumOptions: configs.gridColNumOptions,\n    gridColNumControl: state.control.gridColNum,\n    snakeSpeedOptions: configs.speedOptions,\n    snakeSpeedControl: state.control.snakeSpeedValue,\n    snakeCanHitSelfControl: state.control.snakeCanHitSelf,\n    score: state.snake.data.length,\n    gameStatus: state.game.status\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onGridRowNumControlChange: (value) => { dispatch(changeGridRowNumControl(value)) },\n        onGridColNumControlChange: (value) => { dispatch(changeGridColNumControl(value)) },\n        onSnakeSpeedControlChange: (value) => { dispatch(changeSnakeSpeedControl(value)) },\n        onSnakeCanHitSelfChange: (value) => { dispatch(changeSnakeCanHitSelfControl(value)) },\n        onRestartClick: () => { dispatch(restartGame()) },\n        onToggleClick: () => { dispatch(toggleGame()) },\n        onResetClick: () => { dispatch(resetGame()) },\n        onReviveClick: () => { dispatch(reviveGame()) },\n        onSaveClick: () => { dispatch(saveState()) },\n        onLoadClick: () => { dispatch(loadState()) }\n    }\n}\n\nconst ControlPanelContainer = connect(mapStateToProps, mapDispatchToProps)(ControlPanel);\n\nexport default ControlPanelContainer;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { snakeGo } from '../actions';\n// replaced by redux saga\nclass SnakeTimer extends React.Component {\n\n    setTimer() {\n        if (this.timerID) clearInterval(this.timerID);\n        const { snakeSpeed, onSnakeGo } = this.props;\n        this.timerID = setInterval(\n            onSnakeGo,\n            snakeSpeed\n        );\n    }\n\n    componentDidMount() {\n        this.setTimer();\n    }\n\n    componentDidUpdate() {\n        this.setTimer();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    render() {\n        return null;\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    snakeSpeed: state.snake.speedValue\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSnakeGo: () => { dispatch(snakeGo()) },\n    }\n}\n\nSnakeTimer = connect(mapStateToProps, mapDispatchToProps)(SnakeTimer);\n\nexport default SnakeTimer;","export const UP = 'up';\nexport const DOWN = 'down';\nexport const LEFT = 'left';\nexport const RIGHT = 'right';","import React from 'react';\nimport { connect } from \"react-redux\";\nimport BoardContainer from \"./BoardContainer\";\nimport ControlPanelContainer from \"./ControlPanelContainer\";\nimport SnakeTimer from \"./SnakeTimer\";\nimport { keyCodeToDirection } from \"../utils\"\nimport { changeDirection, createFood, snakeGo } from '../actions';\n\nclass Game extends React.Component {\n\n    handleKeyPress = (event) => {\n        this.props.onKeyPress(event.keyCode);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyPress);\n        this.props.onLoaded();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyPress);\n    }\n\n    render() {\n        return (\n            <div className=\"gameWrapper\">\n                <BoardContainer />\n                <ControlPanelContainer />\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onKeyPress: (value) => {\n            dispatch(changeDirection(keyCodeToDirection(value)));\n            // when you change direction, move one step immediately.\n            // keep Pressing the arrow key, snake will keep moving.\n            dispatch(snakeGo());\n        },\n        onLoaded: () => {\n            dispatch(createFood())\n        }\n    }\n}\n\nGame = connect(null, mapDispatchToProps)(Game);\n\nexport default Game;","// https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nimport { LEFT, RIGHT, UP, DOWN } from \"../constants/Directions\";\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\nexport function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function keyCodeToDirection(keyCode) {\n    switch (keyCode) {\n        case 37:\n            return LEFT;\n        case 38:\n            return UP;\n        case 39:\n            return RIGHT;\n        case 40:\n            return DOWN;\n        default:\n            return LEFT;\n    }\n}","import { RUNNING, STOPPED } from '../constants/GameStatus';\nimport * as directions from '../constants/Directions';\nimport * as configs from '../constants/Config';\n\nexport function getInitialState() {\n    let initialState = {\n        board: {\n            gridColNum: 30,\n            gridRowNum: 30\n        },\n        food: {\n            data: -1\n        },\n        game: {\n            status: STOPPED\n        },\n        snake: {\n            direction: directions.RIGHT,\n            data: [...Array(3).keys()],\n            speedValue: 500,\n            canHitSelf: false,\n        },\n        control: {\n            gridColNum: 30,\n            gridRowNum: 30,\n            snakeSpeedValue: 500,\n            snakeCanHitSelf: false\n        }\n    };\n    return initialState;\n}","import { RUNNING, STOPPED, OVER } from '../constants/GameStatus';\nimport * as directions from '../constants/Directions';\nimport * as actionTypes from '../constants/ActionTypes';\nimport { getInitialState } from '../utils/config';\nimport { LEFT, RIGHT, UP, DOWN } from \"../constants/Directions\";\n\nconst initialState = getInitialState();\n\nexport default function rootReducer(state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.RESTART_GAME_BEFORE: {\n            let nextState = Object.assign({}, state);\n            let initialState = getInitialState();\n            nextState.board.gridColNum = state.control.gridColNum;\n            nextState.board.gridRowNum = state.control.gridRowNum;\n            nextState.snake.speedValue = state.control.snakeSpeedValue;\n            nextState.snake.canHitSelf = state.control.snakeCanHitSelf;\n            nextState.snake.data = initialState.snake.data;\n            nextState.snake.direction = initialState.snake.direction;\n            nextState.game.status = RUNNING;\n            return nextState;\n        }\n        case actionTypes.TOGGLE_GAME: {\n            let nextState = Object.assign({}, state);\n            nextState.game.status = state.game.status === RUNNING ? STOPPED : RUNNING;\n            return nextState;\n        }\n        case actionTypes.RESET_GAME_BEFORE: {\n            let nextState = Object.assign({}, getInitialState());\n            nextState.food.data = action.foodData;\n            return nextState;\n        }\n        case actionTypes.OVER_GAME: {\n            let nextState = Object.assign({}, state);\n            nextState.game.status = OVER;\n            return nextState;\n        }\n        case actionTypes.REVIVE_GAME: {\n            let nextState = Object.assign({}, state);\n            const snakeHead = Number(state.snake.data[state.snake.data.length-1]);\n            const gridRowNum = Number(state.board.gridRowNum);\n            const gridColNum = Number(state.board.gridColNum);\n\n            switch (state.snake.direction) {\n                case UP:\n                    if (snakeHead < gridColNum / 2) {\n                        nextState.snake.direction = RIGHT;\n                    } else {\n                        nextState.snake.direction = LEFT;\n                    }\n                    break;\n                case RIGHT:\n                    // which row\n                    if (snakeHead / gridColNum < gridRowNum / 2) {\n                        nextState.snake.direction = DOWN;\n                    } else {\n                        nextState.snake.direction = UP;\n                    }\n                    break;\n                case DOWN:\n                    // which col\n                    if (snakeHead % gridColNum < gridColNum / 2) {\n                        nextState.snake.direction = RIGHT;\n                    } else {\n                        nextState.snake.direction = LEFT;\n                    }\n                    break;\n                case LEFT:\n                    // which row\n                    if (snakeHead / gridColNum < gridRowNum / 2) {\n                        nextState.snake.direction = DOWN;\n                    } else {\n                        nextState.snake.direction = UP;\n                    }\n                    break;\n                default :\n                    break;\n            }\n            nextState.game.status = RUNNING;\n            return nextState;\n        }\n        case actionTypes.CHANGE_GRID_ROW_NUM: {\n            let nextState = Object.assign({}, state);\n            nextState.control.gridRowNum = action.value;\n            return nextState;\n        }\n        case actionTypes.CHANGE_GRID_COL_NUM: {\n            let nextState = Object.assign({}, state);\n            nextState.control.gridColNum = action.value;\n            return nextState;\n        }\n        case actionTypes.CHANGE_SNAKE_SPEED: {\n            let nextState = Object.assign({}, state);\n            nextState.control.snakeSpeedValue = action.value;\n            return nextState;\n        }\n        case actionTypes.CHANGE_SNAKE_CAN_HIT_SELF: {\n            let nextState = Object.assign({}, state);\n            nextState.control.snakeCanHitSelf = action.value;\n            return nextState;\n        }\n        case actionTypes.SNAKE_GO_WITH_DATA: {\n            if (state.game.status !== RUNNING) return state;\n            let nextState = Object.assign({}, state);\n            let nextSnakeData = state.snake.data.slice();\n            nextSnakeData.shift();\n            nextSnakeData.push(action.value);\n            nextState.snake.data = nextSnakeData;\n            return nextState;\n        }\n        case actionTypes.EAT_FOOD: {\n            if (state.game.status !== RUNNING) return state;\n            let nextState = Object.assign({}, state);\n            let nextSnakeData = state.snake.data.slice();\n            nextSnakeData.push(state.food.data);\n            nextState.snake.data = nextSnakeData;\n            return nextState;\n        }\n        case actionTypes.CREATE_FOOD_WITH_DATA: {\n            let nextState = Object.assign({}, state);\n            nextState.food.data = action.value;\n            return nextState;\n        }\n        case actionTypes.CHANGE_DIRECTION: {\n            if (state.game.status !== RUNNING) return state;\n            if (state.snake.direction === LEFT && action.value === RIGHT) return state;\n            if (state.snake.direction === RIGHT && action.value === LEFT) return state;\n            if (state.snake.direction === UP && action.value === DOWN) return state;\n            if (state.snake.direction === DOWN && action.value === UP) return state;\n            let nextState = Object.assign({}, state);\n            nextState.snake.direction = action.value;\n            return nextState;\n        }\n        case actionTypes.LOAD_STATE_WITH_DATA: {\n            return Object.assign({}, state, action.value);\n        }\n        default:\n            return state\n    }\n}","export const stateJson = (state) => JSON.stringify(state);\nexport const snakeSpeedValue = (state) => Number(state.snake.speedValue);\nexport const snakeCanHitSelfValue = (state) => Boolean(state.snake.canHitSelf);\nexport const gameStatus = (state) => state.game.status;\nexport const snakeData = (state) => state.snake.data;\nexport const snakeHead = (state) => Number(state.snake.data[state.snake.data.length-1]);\nexport const snakeDirection = (state) => state.snake.direction;\nexport const gridRowNumControl = (state) => Number(state.control.gridRowNum);\nexport const gridColNumControl = (state) => Number(state.control.gridColNum);\nexport const gridRowNum = (state) => Number(state.board.gridRowNum);\nexport const gridColNum = (state) => Number(state.board.gridColNum);\nexport const foodData = (state) => Number(state.food.data);","export const loadState = () => {\n    try  {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState == null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n}\n\nexport const saveState = (state) => {\n    try  {\n        //const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', state);\n    } catch (err) {\n        // log err\n    }\n}","import { call, delay, put, select, all, takeEvery, fork } from 'redux-saga/effects';\nimport * as types from '../constants/ActionTypes';\nimport { restartGameBefore, resetGameBefore, overGame, snakeGo, snakeGoWithData, eatFood, createFood, createFoodWithData, loadStateWithData } from '../actions';\nimport * as selectors from '../selectors';\nimport { getRandomInt } from '../utils';\nimport { RUNNING, STOPPED, OVER } from '../constants/GameStatus';\nimport { LEFT, RIGHT, UP, DOWN } from '../constants/Directions';\nimport { saveState, loadState } from '../utils/localStorage'\n\nfunction* restartGameSaga(action) {\n    yield put(restartGameBefore());\n    yield put(createFood());\n}\n\nfunction* watchRestartGame() {\n    yield takeEvery(types.RESTART_GAME, restartGameSaga)\n}\n\nfunction* resetGameSaga(action) {\n    yield put(resetGameBefore());\n    yield put(createFood());\n}\n\nfunction* watchResetGame() {\n    yield takeEvery(types.RESET_GAME, resetGameSaga)\n}\n\nfunction* watchSnakeGo() {\n    yield takeEvery(types.SNAKE_GO, snakeGoSaga)\n}\n\nfunction* snakeGoSaga(action) {\n    const gameStatus = yield select(selectors.gameStatus);\n    if (gameStatus === RUNNING) {\n        const gridRowNum = yield select(selectors.gridRowNum);\n        const gridColNum = yield select(selectors.gridColNum);\n        const gridNum = gridRowNum * gridColNum;\n        const snakeDirection = yield select(selectors.snakeDirection);\n        const snakeData = yield select(selectors.snakeData);\n        const snakeHead = yield select(selectors.snakeHead);\n        const snakeCanHitSelfValue = yield select(selectors.snakeCanHitSelfValue);\n        let hitFlag = false;\n        let nextGrid = snakeHead;\n        switch (snakeDirection) {\n            case UP:\n                nextGrid = snakeHead - gridColNum;\n                if (nextGrid < 0) hitFlag = true;\n                break;\n            case DOWN:\n                nextGrid = snakeHead + gridColNum;\n                // be careful, gridNum-1\n                if (nextGrid > gridNum-1) hitFlag = true;\n                break;\n            case LEFT:\n                if (snakeHead % gridColNum === 0) hitFlag = true;\n                nextGrid = snakeHead - 1;\n                break;\n            case RIGHT:\n                nextGrid = snakeHead + 1;\n                if (nextGrid % gridColNum === 0) hitFlag = true;\n                break;\n            default :\n                break;\n        }\n        // check if hit self\n        if (!snakeCanHitSelfValue && snakeData.includes(nextGrid)) {\n            hitFlag = true;\n        }\n        if (hitFlag) {\n            yield put(overGame());\n        } else {\n            const foodData = yield select(selectors.foodData);\n            if (nextGrid === foodData) {\n                yield put(eatFood());\n                yield put(createFood());\n            } else {\n                yield put(snakeGoWithData(nextGrid));\n            }\n        }\n    }\n}\n\nfunction* createFoodSaga(action) {\n    const gridRowNum = yield select(selectors.gridRowNum);\n    const gridColNum = yield select(selectors.gridColNum);\n    const snakeData = yield select(selectors.snakeData);\n    const squareNums = gridRowNum * gridColNum;\n    const squareArr = [...Array(squareNums).keys()];\n    const foodArr = squareArr.filter((i)=>{return !snakeData.includes(i)});\n    yield put(createFoodWithData(foodArr[getRandomInt(0, foodArr.length-1)]));\n}\n\nfunction* watchCreateFood() {\n    yield takeEvery(types.CREATE_FOOD, createFoodSaga)\n}\n\nfunction* saveStateSaga(action) {\n    const stateJson = yield select(selectors.stateJson);\n    saveState(stateJson);\n}\n\nfunction* watchSaveState() {\n    yield takeEvery(types.SAVE_STATE, saveStateSaga)\n}\n\nfunction* loadStateSaga(action) {\n    const json = yield call(loadState);\n    if (json) {\n        yield put(loadStateWithData(json));\n    }\n}\n\nfunction* watchLoadState() {\n    yield takeEvery(types.LOAD_STATE, loadStateSaga)\n}\n\nfunction* snakeGoTimer() {\n    while (true) {\n        let snakeSpeedValue = yield select(selectors.snakeSpeedValue);\n        yield put(snakeGo());\n        yield delay(snakeSpeedValue);\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([\n        watchRestartGame(),\n        watchResetGame(),\n        watchSnakeGo(),\n        watchCreateFood(),\n        watchSaveState(),\n        watchLoadState(),\n        snakeGoTimer()\n    ]);\n}","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createLogger } from 'redux-logger'\nimport Game from './containers/Game';\nimport reducer from './reducers';\nimport sega from './sagas';\nimport './index.css';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst loggerMiddleware = createLogger();\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(sega);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Game />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}